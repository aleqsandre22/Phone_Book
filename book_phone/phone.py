# ეს პროგრამა არის მარტივი სატელეფონო წიგნაკი.
# ეს საშუალებას აძლევს მომხმარებელს დაპრინტოს (გაიგოს) არსებული ტელეფონის ნომრები,

# საჭირო მოდულების იმპორტი.
import random
import pickle

# განსაზღვრა სატელეფონო წიგნაკის.
ph_b = {}


def p_num():
    """ეს ფუნქცია დაპრინტავს ყველა არსებულ ტელეფონის ნომერს სატელეფონო წიგნაკის ბაზიდან (ლექსიკონიდან)."""
    if not ph_b:
        print("ტელეფონის წიგნაკი ცარიელია.")
    else:
        print("ტელეფონის ნომრები:")
        for x, ph_num in ph_b.items():
            print(f"{x}: {ph_num}")

def rem_f_lst():
    """ეს ფუნქცია ამოშლის ადამიანს ტელეფონის წიგნაკის სახელებს (ლექსიკონიდან)."""
    x = input("შეიყვანეთ იმ ადამიანის სახელი, რომლის წაშლა გსურთ: ")
    if x in ph_b:
        del ph_b[x]
        print("პირი ამოღებულია სატელეფონო წიგნაკიდან.")
    else:
        print("თქვენ მიერ შეყვანილი ადამიანი ტელეფონი წიგნაკში არ არის.")

def add_lst():
    """ეს ფუნქცია ამატებს ადამიანს ტელეფონის წიგნაკის ლექსიკონში."""
    y = input("შეიყვანეთ იმ ადამიანის სახელი, რომლის დამატებაც გსურთ: ")
    phone_n = input("შეიყვანეთ იმ პირის ტელეფონის ნომერი, რომლის დამატებაც გსურთ: ")
    ph_b[y] = phone_n
    print("პირი დაემატა სატელეფონო წიგნაკს.")

def s_lst():
    """ეს ფუნქცია ეძებს ადამიანს ტელეფონის წიგნაკის ნომრის ბაზაში (ლექსიკონში)."""
    x = input("შეიყვანეთ იმ ადამიანის სახელი, რომლის მოძიებაც გსურთ: ")
    if x in ph_b:
        print("პირის ტელეფონის ნომერია", ph_b[x])
    else:
        print("პირი არ არის სატელეფონო წიგნაკში.")

def p_book():
    """ეს ფუნქცია ბეჭდავს ტელეფონის წიგნაკის ნომრების (ლექსიკონს)."""
    if not ph_b:
        print("ტელეფონის წიგნაკი ცარიელია.")
    else:
        print("სატელეფონო წიგნაკი:")
        for z, ph_num in ph_b.items():
            print(f"{z}: {ph_num}")

def s_p_b_n():
    """ეს ფუნქცია ახარისხებს სატელეფონო წიგნის ნომრებს სახელის მიხედვით."""
    if not ph_b:
        print("ტელეფონის წიგნაკი ცარიელია.")
    else:
        ph_book_sorted = sorted(ph_b.items(), key=lambda x: x[0])
        print("სატელეფონო წიგნაკი დალაგებულია სახელის მიხედვით:")
        for y, ph_num in ph_book_sorted:
            print(f"{y}: {ph_num}")

def s_p_n():
    """ეს ფუნქცია ახარისხებს სატელეფონო წიგნაკის ინფორაციას ტელეფონის ნომრის მიხედვით."""
    if not ph_b:
        print("ტელეფონის წიგნაკი ცარიელია.")
    else:
        ph_book_sorted = sorted(ph_b.items(), key=lambda x: x[1])
        print("ტელეფონის წიგნაკი დალაგებულია ტელეფონის ნომრის მიხედვით:")
        for x, ph_num in ph_book_sorted:
            print(f"{x}: {ph_num}")

def s_book():
    """ეს ფუნქცია ინახავს სატელეფონო წიგნაკს ფაილში."""
    filname = input("შეიყვანეთ ფაილის სახელი ტელეფონის წიგნაკში შესანახად: ")
    with open(filname) as file:
        pickle.dump(ph_b, file)
    print("ტელეფონის წიგნაკი შენახულია წარმატებით.")
def l_book():
    """ეს ფუნქცია ატვირთავს ტელეფონის წიგნაკს ფაილიდან."""
    filename = input("შეიყვანეთ ფაილის სახელი ტელეფონის წიგნაკის ჩასატვირთად: ")
    try:
        with open(filename ) as file:
            global ph_b
            ph_b = pickle.load(file)
        print("სატელეფონო წიგნაკი წარმატებით ჩაიტვირთა.")
    except FileNotFoundError:
        print("ფაილი არ მოიძებნა. გთხოვთ, დარწმუნდეთ, რომ ფაილი არსებობს.")

# პროგრამის გაშვება.
while True:
    print("ამოირჩიეთ რაც გსურთ?")
    print("1. ამოიღეთ არსებული ტელეფონის ნომრები")
    print("2. ამოიღეთ ვინმე სიიდან სახელით")
    print("3. დაამატეთ ვინმე სიაში")
    print("4. მოიძიეთ ვინმე სიაში")
    print("5. დაპრინტეთ ტელეფონის წიგნაკი")
    print("6. შეინახეთ ტელეფონის წიგნნაკი")
    print("7. ჩატვირთეთ ტელეფონის წიგნაკი")
    print("8. დაალაგეთ ტელეფონის წიგნაკი სახელის მიხედვით")
    print("9. დაალაგეთ ტელეფონის წიგნაკი ტელეფონის ნომრის მიხედვით")
    print("10. გამოსავლა!")

    choice = int(input("აირჩიეთ (1-10): "))

    if choice == 1:
        p_num()
    elif choice == 2:
        rem_f_lst()
    elif choice == 3:
        add_lst()
    elif choice == 4:
        s_lst()
    elif choice == 5:
        p_book()
    elif choice == 6:
        s_book()
    elif choice == 7:
        l_book()
    elif choice == 8:
        s_p_b_n()
    elif choice == 9:
        s_p_n()
    elif choice == 10:
        break
    else:
        print("არასწორი არჩევანი! Გთხოვთ კიდევ სცადეთ!")
        

print("ნახვამდის!")
